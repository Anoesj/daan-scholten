$breakpoints: ();
$show-breakpoint-names: false !default;

// Map breakpoints
@mixin add-breakpoint($setting, $value) {
  $breakpoints: map-merge($breakpoints, ($setting: $value)) !global;
}

@mixin show-breakpoint-names($boolean) {
  $show-breakpoint-names: $boolean !global;
}

// Helpers
@function break-width($breakpoint) {
  @return nth($breakpoint, 1);
}

@function snap-width($breakpoint) {
  @return nth($breakpoint, 2);
}

@function get-grid($breakpoint) {
  @return nth($breakpoint, 3);
}

@function cols-amount($breakpoint) {
  @return nth($breakpoint, 4);
}

// Set up the grid
@mixin setup-grid (
    $limited-width-elements:  $limited-width-elements,
    $transitions:             false
  ) {

  html, body {
    min-height: 100%;
    margin: 0;
    padding: 0;
  }

  html.lt-ie9 {
    width: $default-page-width;
  }

  @include sgs-change('mobile first', false);
  @include add-gutter-style('split');
  @include add-gutter(.35);

  html {
    overflow-y: auto;
  }

  $keys: map_keys($breakpoints);
  @each $key in $keys {
    $breakpoint: map_get($breakpoints, $key);
    $break-at:  break-width($breakpoint);
    $width:     snap-width($breakpoint);
    $grid:      get-grid($breakpoint);
    $cols:      cols-amount($breakpoint);

    @include add-grid($grid at $break-at);

    @each $element in $limited-width-elements {
      #{$element} {
        margin-left: auto;
        margin-right: auto;
        @include clearfix;
      }
    }

    @include breakpoint($break-at) {
      @if $show-breakpoint-names == true {
        body {
          position: relative;

          &:before {
            content: "#{$key}";
            position: absolute;
            top: 20px;
            right: 20px;
            z-index: 2000;
            opacity: .4;
            font-size: 16px;
            line-height: 16px;
          }
        }
      }

      @each $element in $limited-width-elements {
        #{$element} {
          width: $width;
          
          @if transitions == true {
            transition: width $speed-fast 0s $ease-out;
          }
        }
      }

      .full-width {
        @include isolation-span($cols, 1, 'both', $from: 'right');
      }
    }
  }
}

// Background grid
@mixin add-background-grid {
  html.grid-enabled {
    @each $element in $limited-width-elements {
      #{$element} {
        @include background-grid($color: rgba($light-blue, .3));
        background-clip: content-box;
      }
    }
  }
}

// BP Helper function
// to add CSS for certain breakpoints, use one of these syntaxex:
// 
// USING bp({number}):
// @include breakpoint(bp(3)) {
//  body {
//    background-color: black;
//  }
// }

// OR USING bp($breakpoint-name):
// @include breakpoint(bp($tablet)) {
//  body {
//    background-color: black;
//  }
// }

@function bp($slice) {
  @if (type-of($slice) == 'number') {
    @return nth($breakpoints, $slice);
  }

  @else if (type-of($slice) == 'list') {
    @return nth($slice, 1);
  }
}